User Accounts with Secure Authentication (Brendan)

-Require users to login to the app with a username and password stored in a database
-Design the sql schema that will store user account information
-Create a login and signup page
-When a user creates an account, add an entry to the sql table
-When a user tries to login, check the database to ensure that their credentials are correct
-If so, redirect them to the home page



Users to see all users who are currently logged in (Jonathan)

-Have an indicator on friends list that dictates who’s online/logged in
-Keep track of who’s logged in and if they are logged in have a variable in     the mysql table that says they’re logged in
-Insert users that are logged in into a table for people that are online only as well as the current time that they logged in.
-Everytime a user loads a page, check their current time variable, if it is greater than five minutes more than the current time update the current time to show that they are active.
-If 20 minutes has passed since the last update time, mark user as offline or online but inactive/busy
-https://stackoverflow.com/questions/1051895/whats-the-easiest-way-to-determine-if-a-user-is-online-php-mysql



Users can send direct messages (DM) to other users with notifications when a DM is received (sarah)

-Chat section where users can text each other back and forth
-Create socket
-Communicate the socket address
-Keep waiting for an incoming connection request/s
-Connect to client
-Receive the message
-Decode the destination user almond select the socket
-Send a message to the intended client
-Keep repeating step 5&6 as per users wish
-Exit i.e. end the communication by terminating to connection
-https://codinginfinite.com/python-chat-application-tutorial-source-code/
-https://www.geeksforgeeks.org/simple-chat-room-using-python/

Users can share some form of multimedia content which is stored and hosted on your server (Everyone)

Users can have profile pictures and change their profile pictures whenever.



https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-vi-profile-page-and-avatars
https://en.gravatar.com/site/implement/images


Live interactions between users via WebSockets (Cannot be text) (Ethan)

-Liking a user's posts
-Taken from week 8 webSocket lecture slide
-Establish a TCP connection
-Client sends an HTTP request to upgrade to the webSocket protocol
-Server responds confirming the upgrade request
-Client and server keep the TCP connection open
-Client and server send WebSocket messages/frames
-over the TCP connection until one side closes the connection


Pages left to do:
Home Feed Page - Ethan
Friends Page- Jonathan
Login Page - Jonathan
Settings Page - Brendan
Create a Post - Ethan
 
